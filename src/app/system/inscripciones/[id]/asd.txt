"use client";

import React, { useEffect, useState, useRef } from "react";
import PageTemplate from "@/app/common/components/PageTemplate";
import { useParams } from "next/navigation";
import RouterLinks from "@/config/RouterLinks";
import getOneStringParams from "@/app/common/helpers/getOneStringParams";
import IconButton from "@/app/common/components/IconButton";
import EditIcon from "@/app/common/components/icons/EditIcon";
import TextValue from "@/app/common/components/TextValue";
import useSede from "../../sedes/hooks/useSede";
import SectionContainer from "@/app/common/components/SectionContainer";
import useStudentEnrollment from "../hooks/useStudentEnrollment";
import useStudent from "../../estudiantes/hooks/useStudent";
import Title from "@/app/common/components/Title";
import Button from "@/app/common/components/Button";
import useEnrollmentPeriod from "../../periodo_inscripciones/hooks/useEnrollmentPeriod";
import CatedraEnrollmentItem from "../components/CatedraEnrollmentItem";
import Spacer from "@/app/common/components/Spacer";
import NeedPermissions from "../../user/components/NeedPermissions";
import { UserPermissions } from "../../user/interfaces/user.interface";
import generatePDF from "@/app/common/utils/generatePDF";
import PagePDF from "@/app/system/documentos/constEstudio/page";

const Page = () => {
	const { id } = useParams();
	const studentEnrollmentId = getOneStringParams(id);
	const pdfRef = useRef(null);

	const { studentEnrollment } = useStudentEnrollment({ id: studentEnrollmentId });
	const { enrollmentPeriod, getEnrollmentPeriod } = useEnrollmentPeriod();
	const { sede, getSede } = useSede();
	const { student, getStudent } = useStudent();
	const [pdfData, setPdfData] = useState(null);

	useEffect(() => {
		if (studentEnrollment) {
			getStudent(studentEnrollment.studentId);
			getSede(studentEnrollment.sedeId);
			getEnrollmentPeriod(studentEnrollment.enrollmentPeriodId);
		}
	}, [studentEnrollment]);

	useEffect(() => {
		if (student && sede && enrollmentPeriod) {
			setPdfData({
				studentName: `${student.name} ${student.lastname}`,
				idNumber: `${student.nationality}-${student.CI}`,
				studentEmail: student.email,
				studentPhone: student.phone_number[0],
				sede: sede.name,
				enrollmentPeriod: `${enrollmentPeriod.year}-${enrollmentPeriod.step}`,
				date: new Date().toLocaleDateString(),
			});
		}
	}, [student, sede, enrollmentPeriod]);

	const handleGeneratePDF = () => {
		if (pdfData && pdfRef.current) {
			generatePDF("pagePDF", "Constancia_Estudio.pdf");
		} else {
			console.error("No se encontró el elemento para generar el PDF.");
		}
	};

	return (
		<PageTemplate
			navBarProps={{
				navTitle: "Detalles de la inscripción",
				hrefBackButton: RouterLinks.studentEnrollment.all,
				rightButtons: (
					<NeedPermissions permissions={[UserPermissions.inscripcionesEdit]}>
						<IconButton href={RouterLinks.studentEnrollment.edit(id)}>
							<EditIcon />
						</IconButton>
					</NeedPermissions>
				),
			}}
			permissionsRequired={[UserPermissions.inscripciones]}
		>
			{studentEnrollment && (
				<SectionContainer>
					<div ref={pdfRef} id="pagePDF">
						<PagePDF {...pdfData} />
					</div>
				</SectionContainer>
			)}

			<SectionContainer>
				<div className="flex justify-center mt-4">
					<Button onClick={handleGeneratePDF}>Generar Constancia de Estudio</Button>
				</div>
			</SectionContainer>
		</PageTemplate>
	);
};

export default Page;